"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var convert_1 = __importDefault(require("./util/convert"));
var util_1 = __importDefault(require("./util/util"));
var words_1 = __importDefault(require("./words"));
//@ts-ignore
var crypto_js_1 = require("crypto-js");
var Bip39Mnemonic = /** @class */ (function () {
    function Bip39Mnemonic(password) {
        var _this = this;
        this.createWallet = function (entropy) {
            if (entropy) {
                if (entropy.length !== 64) {
                    throw new Error('Invalid entropy length, must be a 64 byte hexadecimal string');
                }
                if (!/^[0-9a-f]+$/i.test(entropy)) {
                    throw new Error('Entopy is not a valid hexadecimal string');
                }
            }
            if (!entropy) {
                entropy = _this.randomHex(64);
            }
            var entropyBinary = convert_1.default.hexStringToBinary(entropy);
            var entropySha256Binary = convert_1.default.hexStringToBinary(_this.calculateChecksum(entropy));
            var entropyBinaryWithChecksum = entropyBinary + entropySha256Binary;
            var mnemonicWords = [];
            for (var i = 0; i < entropyBinaryWithChecksum.length; i += 11) {
                mnemonicWords.push(words_1.default[parseInt(entropyBinaryWithChecksum.substr(i, 11), 2)]);
            }
            var mnemonicFinal = mnemonicWords.join(' ');
            var seed = _this.mnemonicToSeed(mnemonicFinal);
            return {
                mnemonic: mnemonicFinal,
                seed: seed,
            };
        };
        this.validateMnemonic = function (mnemonic) {
            var wordArray = util_1.default.normalizeUTF8(mnemonic).split(' ');
            if (wordArray.length % 3 !== 0) {
                return false;
            }
            var bits = wordArray.map(function (w) {
                var wordIndex = words_1.default.indexOf(w);
                if (wordIndex === -1) {
                    return false;
                }
                return (wordIndex.toString(2)).padStart(11, '0');
            }).join('');
            var dividerIndex = Math.floor(bits.length / 33) * 32;
            var entropyBits = bits.slice(0, dividerIndex);
            var checksumBits = bits.slice(dividerIndex);
            var entropyBytes = entropyBits.match(/(.{1,8})/g).map(function (bin) { return parseInt(bin, 2); });
            if (entropyBytes.length < 16)
                return false;
            if (entropyBytes.length > 32)
                return false;
            if (entropyBytes.length % 4 !== 0)
                return false;
            var entropyHex = convert_1.default.bytesToHexString(entropyBytes);
            var newChecksum = _this.calculateChecksum(entropyHex);
            var inputChecksum = convert_1.default.binaryToHexString(checksumBits);
            if (newChecksum != inputChecksum) {
                return false;
            }
            return true;
        };
        this.mnemonicToSeed = function (mnemonic) {
            var normalizedMnemonic = util_1.default.normalizeUTF8(mnemonic);
            var normalizedPassword = 'mnemonic' + util_1.default.normalizeUTF8(_this.password);
            return crypto_js_1.PBKDF2(normalizedMnemonic, normalizedPassword, {
                keySize: 512 / 32,
                iterations: 2048,
                hasher: crypto_js_1.algo.SHA512,
            })
                .toString(crypto_js_1.enc.Hex);
        };
        this.randomHex = function (length) {
            return crypto_js_1.lib.WordArray.random(length / 2).toString();
        };
        this.calculateChecksum = function (entropyHex) {
            var entropySha256 = crypto_js_1.SHA256(crypto_js_1.enc.Hex.parse(entropyHex)).toString();
            return entropySha256.substr(0, entropySha256.length / 32);
        };
        this.password = password;
    }
    return Bip39Mnemonic;
}());
exports.default = Bip39Mnemonic;
