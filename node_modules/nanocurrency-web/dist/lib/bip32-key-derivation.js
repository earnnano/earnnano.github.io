"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//@ts-ignore
var crypto_js_1 = require("crypto-js");
var convert_1 = __importDefault(require("./util/convert"));
var ED25519_CURVE = 'ed25519 seed';
var HARDENED_OFFSET = 0x80000000;
var Bip32KeyDerivation = /** @class */ (function () {
    function Bip32KeyDerivation(path, seed) {
        var _this = this;
        this.derivePath = function () {
            var _a = _this.getKeyFromSeed(), key = _a.key, chainCode = _a.chainCode;
            var segments = _this.path
                .split('/')
                .map(function (v) { return v.replace('\'', ''); })
                .map(function (el) { return parseInt(el, 10); });
            return segments.reduce(function (parentKeys, segment) {
                return _this.CKDPriv(parentKeys, segment + HARDENED_OFFSET);
            }, { key: key, chainCode: chainCode });
        };
        this.getKeyFromSeed = function () {
            return _this.derive(crypto_js_1.enc.Hex.parse(_this.seed), crypto_js_1.enc.Utf8.parse(ED25519_CURVE));
        };
        this.CKDPriv = function (_a, index) {
            var key = _a.key, chainCode = _a.chainCode;
            var ib = [];
            ib.push((index >> 24) & 0xff);
            ib.push((index >> 16) & 0xff);
            ib.push((index >> 8) & 0xff);
            ib.push(index & 0xff);
            var data = '00' + key + convert_1.default.ab2hex(new Uint8Array(ib).buffer);
            return _this.derive(crypto_js_1.enc.Hex.parse(data), crypto_js_1.enc.Hex.parse(chainCode));
        };
        this.derive = function (data, base) {
            var hmac = crypto_js_1.algo.HMAC.create(crypto_js_1.algo.SHA512, base);
            var I = hmac.update(data).finalize().toString();
            var IL = I.slice(0, I.length / 2);
            var IR = I.slice(I.length / 2);
            return {
                key: IL,
                chainCode: IR,
            };
        };
        this.path = path;
        this.seed = seed;
    }
    return Bip32KeyDerivation;
}());
exports.default = Bip32KeyDerivation;
