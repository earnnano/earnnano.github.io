import Curve25519 from './util/curve25519';
export default class Ed25519 {
    curve: Curve25519;
    X: Int32Array;
    Y: Int32Array;
    L: Uint8Array;
    constructor();
    pack(r: Uint8Array, p: Int32Array[]): void;
    modL(r: Uint8Array, x: Uint32Array | Float64Array): void;
    reduce(r: Uint8Array): void;
    scalarmult(p: Int32Array[], q: Int32Array[], s: Uint8Array): void;
    scalarbase(p: Int32Array[], s: Uint8Array): void;
    /**
     * Generate an ed25519 keypair
     * @param {String} seed A 32 byte cryptographic secure random hexadecimal string. This is basically the secret key
     * @param {Object} Returns sk (Secret key) and pk (Public key) as 32 byte hexadecimal strings
     */
    generateKeys(seed: string): KeyPair;
    /**
     * Generate a message signature
     * @param {Uint8Array} msg Message to be signed as byte array
     * @param {Uint8Array} secretKey Secret key as byte array
     * @param {Uint8Array} Returns the signature as 64 byte typed array
     */
    sign(msg: Uint8Array, secretKey: Uint8Array): Uint8Array;
    private naclSign;
    private cryptoSign;
    private cryptoHash;
}
export interface KeyPair {
    privateKey: string;
    publicKey: string;
}
