"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bip32_key_derivation_1 = __importDefault(require("./bip32-key-derivation"));
var bip39_mnemonic_1 = __importDefault(require("./bip39-mnemonic"));
var ed25519_1 = __importDefault(require("./ed25519"));
var nano_address_1 = __importDefault(require("./nano-address"));
var AddressGenerator = /** @class */ (function () {
    function AddressGenerator() {
    }
    /**
     * Generates the wallet
     *
     * @param {String} seedPassword Password for the seed
     */
    AddressGenerator.prototype.generateWallet = function (entropy, seedPassword) {
        if (entropy === void 0) { entropy = ''; }
        if (seedPassword === void 0) { seedPassword = ''; }
        var bip39 = new bip39_mnemonic_1.default(seedPassword);
        var wallet = bip39.createWallet(entropy);
        var bip44 = new bip32_key_derivation_1.default("44'/165'/0'", wallet.seed);
        var privateKey = bip44.derivePath().key;
        var ed25519 = new ed25519_1.default();
        var keyPair = ed25519.generateKeys(privateKey);
        var nano = new nano_address_1.default();
        var address = nano.deriveAddress(keyPair.publicKey);
        return {
            mnemonic: wallet.mnemonic,
            seed: wallet.seed,
            accounts: [{
                    accountIndex: 0,
                    privateKey: keyPair.privateKey,
                    publicKey: keyPair.publicKey,
                    address: address,
                }],
        };
    };
    return AddressGenerator;
}());
exports.default = AddressGenerator;
